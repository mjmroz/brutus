name: Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        # Note: Python 3.8 dropped (EOL October 2024)
        # Note: Windows is not supported due to healpy dependency
        # Windows users should use WSL (see README)

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Install numpy first and lock the version to prevent binary incompatibility
        pip install "numpy>=1.19,<2.0"
        # Install all packages with compiled extensions against this numpy
        # Use --no-build-isolation to ensure they all use the same numpy
        pip install --no-build-isolation "scipy>=1.6.0"
        pip install --no-build-isolation "healpy>=1.14.0"
        # Now install package (which may include astropy, h5py, etc.)
        pip install --no-build-isolation -e ".[test]"

    - name: Cache test data files
      uses: actions/cache@v3
      id: cache-data
      with:
        path: ~/.astro-brutus/
        key: brutus-data-v1-${{ runner.os }}
        restore-keys: |
          brutus-data-v1-

    - name: Download test data files
      if: steps.cache-data.outputs.cache-hit != 'true'
      run: |
        # Download essential data files for testing
        # GitHub Actions cache limit: 10 GB per repo
        # MIST grids: ~2-4 GB, Isochrones: ~100 MB, Tracks: ~200 MB
        python -c "
        import sys
        import traceback

        try:
            from brutus.data import fetch_grids, fetch_isos, fetch_tracks

            print('=' * 60)
            print('Downloading MIST data files for testing...')
            print('=' * 60)

            print('\n1. Downloading MIST grids (~2-3 GB)...')
            fetch_grids(grid='mist_v9')
            print('   ✓ MIST grids downloaded')

            print('\n2. Downloading isochrones (~100 MB)...')
            fetch_isos()
            print('   ✓ Isochrones downloaded')

            print('\n3. Downloading EEP tracks (~200 MB)...')
            fetch_tracks()
            print('   ✓ EEP tracks downloaded')

            print('\n' + '=' * 60)
            print('All data files downloaded successfully!')
            print('=' * 60)

        except Exception as e:
            print('\n' + '!' * 60)
            print('ERROR: Could not download data files')
            print('!' * 60)
            print(f'Error: {e}')
            traceback.print_exc()
            print('\nTests requiring data files will be skipped.')
            print('!' * 60)
            sys.exit(0)  # Don't fail the workflow
        "
      continue-on-error: true

    - name: Lint with flake8
      run: |
        # Install flake8 if it's not in test dependencies
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/brutus --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length is handled by black.
        flake8 src/brutus --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Test with pytest
      env:
        NUMBA_DISABLE_JIT: 1
      run: |
        pytest tests/ -v --cov=brutus --cov-report=xml

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Check formatting with black
      run: |
        black --check --diff src/brutus tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/brutus tests/

    # Type checking is currently optional - mypy has many false positives
    # with scientific Python code (numpy, scipy, etc.)
    # - name: Type checking with mypy
    #   run: |
    #     mypy src/brutus --ignore-missing-imports
    #   continue-on-error: true

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package with twine
      run: |
        twine check dist/*

    - name: Test install from wheel
      run: |
        pip install dist/*.whl
        python -c "import brutus; print(brutus.__version__)"
